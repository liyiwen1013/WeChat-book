spring:
  application:
    # \u5E94\u7528\u540D\u79F0
    name: book
  datasource:
    # \u6570\u636E\u5E93\u9A71\u52A8\uFF1A
    driver-class-name: com.mysql.cj.jdbc.Driver
    # \u6570\u636E\u6E90\u540D\u79F0
    name: defaultDataSource
    # \u6570\u636E\u5E93\u8FDE\u63A5\u5730\u5740
    url: jdbc:mysql://localhost:3306/book?serverTimezone=UTC
    # \u6570\u636E\u5E93\u7528\u6237\u540D&\u5BC6\u7801\uFF1A
    username: root
    password: root
  mvc:
    converters:
      preferred-json-mapper: gson
server:
  # \u5E94\u7528\u670D\u52A1 WEB \u8BBF\u95EE\u7AEF\u53E3
  port: 80
## Format to use when serializing Date objects.
#spring.gson.date-format=
#
## Whether to disable the escaping of HTML characters such as '<', '>', etc.
#spring.gson.disable-html-escaping=
#
## Whether to exclude inner classes during serialization.
#spring.gson.disable-inner-class-serialization=
#
## Whether to enable serialization of complex map keys (i.e. non-primitives).
#spring.gson.enable-complex-map-key-serialization= # Whether to enable serialization of complex map keys (i.e. non-primitives).
#
## Whether to exclude all fields from consideration for serialization or deserialization that do not have the "Expose" annotation.
#spring.gson.exclude-fields-without-expose-annotation=
#
## Naming policy that should apply to an object's field during serialization and deserialization.
#spring.gson.field-naming-policy=
#
## Whether to generate non executable JSON by prefixing the output with some special text.
#spring.gson.generate-non-executable-json=
#
## Whether to be lenient about parsing JSON that doesn't conform to RFC 4627.
#spring.gson.lenient=
#
## Serialization policy for Long and long types.
#spring.gson.long-serialization-policy=
#
## Whether to output serialized JSON that fits in a page for pretty printing.
#spring.gson.pretty-printing=
#
## Whether to serialize null fields.
#spring.gson.serialize-nulls=

